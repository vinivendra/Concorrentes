EP1 - MAC0438 - Programação Concorrente
Alunos:
Helena Almeida Victoretti - 7991124
Vinicius Vendramini - 7991103

=========================================

Para compilar o programa, basa usar o Makefile fornecido junto aos outros arquivos. Este exercício programa foi feito em C++. Todavia, não usamos grandes funcionalidades da linguagem, de forma que o código é muito parecido com o de C. Por exemplo, apesar de o C++ fornecer algumas bibliotecas de monitores, achamos melhor criar a nossa própria. Ela está implementada em monitor.cpp e monitor.h.

Essencialmente, para este programa, cada garfo é um monitor. O garfo controla quem pode ou não pegá-lo, e quem pegá-lo deve devolvê-lo. Isto é feito com uma stuct simples 'garfo', que contém apenas a informação necessária para que o monitor possa funcionar. Como este caso é simples (existe sempre no máximo um processo usando o monitor e outro na fila de espera), pudemos simplificar a implementação deste monitor a ponto de precisarmos apenas de três variáveis.

    O mutex 'm' funciona de forma semelhante ao visto em sala de aula: ele é usado pelas funções 'pega', 'devolve' e 'tenta', que são as funcoes de interface do monitor com o mundo externo, para controlar a exclusão mútua dentro das funções do monitor. Este mutex é travado sempre que uma função do monitor precisa ser chamada e destravado sempre que ela retorna.
    O mutex 'privateMutex' é o modo como o monitor em si funciona. É ele que será travado quando o monitor estiver em uso e destravado quando foi liberado, e é ele o responsável por fazer o processo em espera dormir. Como temos no máximo um processo em espera (o filósofo que não está comendo com este garfo no momento), não precisamos de mais de um mutex.
    O inteiro 'ocupado' serve para contarmos quantos f ilósofos estao atualmente querendo acessar ou acessando o garfo. Isso serve para podermos usar implementar a função 'tenta', principalmente.

As funções expostas pelos garfos par os filósofos procuram ter sentido semântico, e ainda assim são funções muito simples. A função 'pega' vai esperar o garfo em questão ser liberado e, quando for, vai pegá-lo. A 'devolve' vai devolver o garfo quando estiver em uso. A 'tenta' vai olhar para o garfo e ver se ele está ou não ocupado. Caso estiver, ela não faz nada mas avisa quem chamou; caso contrário, ela pega o garfo.

As funções de manipulação do monitor em si, das quais implementamos 'wait', 'signal' e 'empty' estão no arquivo .cpp e são privadas para as funções de interface. Elas são versões simplificadas das funções vistas em classe.

    A função wait simplesmente avisa, pela variável 'ocupado', que alguém está querendo usar o monitor e então destrava o mutex de exclusão mútua 'm' para poder travar o mutex que fará o processo dormir. Então, o mutex m é destravado novamente. Estas mudanças em 'm' são necessárias para que, quando um processo vá dormir com o mutex privado, ele não acabe travando todas as outras chamadas do monitor (inclusive a que faria ele parar de esperar).
    A função signal sinaliza que o monitor não está mais sendo usado por este processo e então simplesmente libera o mutex.
    A lógica da função empty já está, na prática, envolvido nas outras duas. Ela funciona apenas para retornar o atual valor da variável que cuida disso.

